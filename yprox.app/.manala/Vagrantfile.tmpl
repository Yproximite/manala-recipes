# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version '>= 2.2.10'

Vagrant.configure(2) do |config|
  # Ssh
  config.ssh.forward_agent = true
  config.ssh.insert_key = false
  config.ssh.extra_args = ['-q'] # Quiet mode
  config.ssh.forward_env = ['WORKDIR']

  # Force vagrant to use virtualbox provider
  config.vm.provider "virtualbox"

  # Vm
  config.vm.box = 'bento/debian-{{ .Vars.system.version }}'
  config.vm.hostname = '{{ .Vars.system.hostname }}'
  config.vm.network 'private_network', type: 'dhcp'
  config.vm.define 'development' do |development| end
  config.vm.synced_folder '..', '/srv/app',
    type: 'nfs',
    mount_options: ['vers=3', 'tcp', 'rw', 'nolock', 'actimeo=1'],
    linux__nfs_options: ['rw', 'all_squash', 'async']

  # Vm - Virtualbox
  config.vm.provider 'virtualbox' # Force provider
  config.vm.provider :virtualbox do |virtualbox|
    virtualbox.name = '{{ regexReplaceAll "^(.*)\\.[^.]*$" .Vars.system.hostname "${1}" }}'
    virtualbox.memory = ENV['BOX_MEMORY'] || {{ .Vars.system.memory }}
    virtualbox.cpus = ENV['BOX_CPUS'] || {{ .Vars.system.cpus }}
    virtualbox.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
    virtualbox.customize ['modifyvm', :id, '--natdnsproxy1', 'on']
  end

  # Plugins - Landrush
  config.vagrant.plugins = ['landrush']
  config.landrush.enabled            = true
  config.landrush.tld                = config.vm.hostname
  config.landrush.guest_redirect_dns = false

  # Vm - Provision - Dotfiles
  for dotfile in ['.ssh/config', '.gitconfig', '.gitignore', '.gitignore_global', '.composer/auth.json', '.gnupg/private-keys-v1.d', '.gnupg/pubring.kbx', '.gnupg/pubring.kbx~', '.gnupg/trustdb.gpg']
    if File.exists?(File.join(Dir.home, dotfile)) then
      config.vm.provision dotfile, type: 'file', run: 'always' do |file|
        file.source      = '~/' + dotfile
        file.destination = dotfile
      end
    end
  end

  # Vm - Provision - mkcert CA
  Dir['/usr/local/share/ca-certificates/mkcert_*'].each do |path|
    filename = path.split('/').last

    config.vm.provision 'file', run: 'always' do |file|
      file.source = path
      file.destination = "/tmp/#{filename}" # file provisionner can't write in /usr/local/... due to permissions, we have to use a trigger
    end

    # copy to /usr/local/..., apply permissions and update CA certificates
    config.trigger.after [:up, :provision] do |trigger|
      trigger.name = "mkcert"
      trigger.info = "Copying mkcert's CA file..."
      trigger.run_remote = {
        inline: 'if [ -f "%{source}" ]; then mv "%{source}" "%{path}" && chown root:staff "%{path}" && update-ca-certificates; fi' % { source: "/tmp/#{filename}", path: path }
      }
    end
  end

  # Vm - Provision - Setup
  config.vm.provision 'setup', type: 'shell' do |setup|
    setup.keep_color = true
    setup.privileged = true
    setup.reset = true
    setup.path = 'vagrant/bin/setup.sh'
  end

  # Vm - Provision - System
  config.vm.provision 'system', type: 'ansible_local' do |system|
    system.provisioning_path = '/vagrant/ansible'
    system.playbook = 'system.yaml'
    system.inventory_path = 'inventories'
    system.become = true
    system.galaxy_role_file = 'collections/requirements.yaml'
    system.galaxy_command = 'ansible-galaxy collection install --requirements-file=%{role_file} --force'
    system.tags = ENV['TAGS']
    system.verbose = ENV['VERBOSE'] ? 'vvv' : false
    system.raw_arguments = ENV['DIFF'] ? ['--check', '--diff'] : []
  end

  # Start nginx after mkcert has generated certificates
  config.trigger.after :up do |trigger|
    trigger.name = "nginx"
    trigger.info = "Starting nginx..."
    trigger.run_remote = {inline: "if systemctl cat nginx >/dev/null 2>&1; then sudo systemctl start nginx; fi"}
  end

  config.trigger.after :up do |trigger|
    trigger.ruby do |env,machine|
      puts "      \e[32m,\e[0m"
      puts "   \e[31m\\\e[0m  \e[32m:\e[0m  \e[31m/\e[0m"
      puts "\e[32m`.\e[0m \e[33m__/ \\__\e[0m \e[32m.'\e[0m{{ if .Vars.system.mariadb.version }}  PhpMyAdmin: http://{{ .Vars.system.hostname }}:1979{{ end }}"
      puts "\e[31m_ _\e[0m\e[33m\\     /\e[0m\e[31m_ _\e[0m{{ if .Vars.system.postgresql.version }}  PhpPgAdmin: http://{{ .Vars.system.hostname }}:1980{{ end }}"
      puts "   \e[33m/_   _\\\e[0m{{ if .Vars.system.redis.version }}     PhpRedisAdmin: http://{{ .Vars.system.hostname }}:1981{{ end }}"
      puts " \e[32m.'\e[0m  \e[33m\\ /\e[0m  \e[32m`.\e[0m"
      puts "   \e[31m/\e[0m  \e[32m:\e[0m  \e[31m\\\e[0m"
      puts "      \e[32m'\e[0m"
    end
  end
end
